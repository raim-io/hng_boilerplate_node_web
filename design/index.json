{
  "openapi": "3.0.2",
  "info": {
    "title": "HNG 11 BACKEND TRACK (TASK 3) - OpenAPI 3.0 - BACKEND NINJAS",
    "description": "",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.19"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "/api/v1"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Authentication Resources"
    },
    {
      "name": "user",
      "description": "User Resources"
    },
    {
      "name": "profile",
      "description": "Profile Resources"
    },

    {
      "name": "payment",
      "description": "Payment Resources"
    },
    {
      "name": "settings",
      "description": "Settings Resources"
    },
    {
      "name": "policy",
      "description": "Policy Resources"
    },
    {
      "name": "contact",
      "description": "Contact Resources"
    },
    {
      "name": "activity",
      "description": "Activity Resources"
    },
    {
      "name": "waitlist",
      "description": "Waitlist Resources"
    },
    {
      "name": "invite",
      "description": "Invite Resources"
    },
    {
      "name": "notification",
      "description": "Notification Resources"
    },
    {
      "name": "blog",
      "description": "Blog Resources"
    },
    {
      "name": "language",
      "description": "Language Resources"
    },
    {
      "name": "region",
      "description": "Region Resources"
    },
    {
      "name": "email",
      "description": "Notification Resources"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["auth"],
        "summary": "Register a new user",
        "description": "",
        "operationId": "registerUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string",
                    "description": "First name of the registrant"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name of the registrant"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address of the registrant"
                  },
                  "password": {
                    "type": "string",
                    "description": "Registrant's password"
                  }
                },
                "required": ["first_name", "last_name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the registrant"
                    },
                    "first_name": {
                      "type": "string",
                      "description": "First name of the registrant"
                    },
                    "last_name": {
                      "type": "string",
                      "description": "Last name of the registrant"
                    },
                    "email": {
                      "type": "string",
                      "description": "Email address of the registrant"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Account creation timestamp"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Account update timestamp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["auth"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email address of the registrant"
                  },
                  "password": {
                    "type": "string",
                    "description": "Registrant's password"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the registrant"
                    },
                    "token": {
                      "type": "string",
                      "description": "Access token of the logged in user"
                    },
                    "first_name": {
                      "type": "string",
                      "description": "First name of the registrant"
                    },
                    "last_name": {
                      "type": "string",
                      "description": "Last name of the registrant"
                    },
                    "email": {
                      "type": "string",
                      "description": "Email address of the registrant"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Account creation timestamp"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Account update timestamp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid email/password supplied"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["auth"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "200": {
            "description": "Successfully logged out"
          }
        }
      }
    },

    "/user": {
      "get": {
        "tags": ["user"],
        "summary": "Fetch all Users",
        "description": "This can only be done by the logged in super admin.",
        "operationId": "fetchUsers",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["user"],
        "summary": "Create a User",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/user/:user_id": {
      "get": {
        "tags": ["user"],
        "summary": "Fetch a Single User",
        "description": "",
        "operationId": "fetchSingleUser",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "ID of the requested user",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Update a Single User",
        "description": "",
        "operationId": "updateSingleUser",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "ID of the requested user",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },

    "/organisations": {
      "get": {
        "tags": ["organisation"],
        "summary": "Fetch all organisations",
        "description": "",
        "operationId": "fetchOrganisations",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["organisation"],
        "summary": "Create an organisation",
        "description": "This can only be done by the logged in user.",
        "operationId": "createOrganisation",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/:organisation_id": {
      "get": {
        "tags": ["organisation"],
        "summary": "Fetch a single organisation",
        "description": "",
        "operationId": "fetchSingleOrganisation",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "ID of the requested user",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["organisation"],
        "summary": "Update a single organisation",
        "description": "",
        "operationId": "updateSingleOrganisation",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "ID of the requested user",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },

    "/profiles": {
      "get": {
        "tags": ["profile"],
        "summary": "Fetch all profiles",
        "description": "",
        "operationId": "fetchProfiles",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/:profile_id": {
      "get": {
        "tags": ["profile"],
        "summary": "Fetch a single profile",
        "description": "",
        "operationId": "fetchSingleProfile",
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "required": true,
            "description": "ID of the requested user",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["organisation"],
        "summary": "Update a single profile",
        "description": "",
        "operationId": "updateSingleOrganisation",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "ID of the requested user",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },

    "/payments": {
      "post": {
        "tags": ["payment"],
        "summary": "Make a payment",
        "description": "Initiate a payment using the specified gateway.",
        "operationId": "makePayment",
        "parameters": [
          {
            "name": "gateway",
            "in": "query",
            "description": "The payment gateway to be used for the transaction.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["stripe", "flutterwave", "lemonsqueezy"],
              "default": "flutterwave"
            }
          }
        ],
        "requestBody": {
          "description": "Payment details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },

    "/blog": {
      "get": {
        "tags": ["blog"],
        "summary": "Get all blog posts",
        "responses": {
          "200": {
            "description": "List of blog posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Blog post ID",
                        "example": "123456"
                      },
                      "title": {
                        "type": "string",
                        "description": "Title of the blog post",
                        "example": "My First Blog Post"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content of the blog post",
                        "example": "This is the content of my first blog post."
                      },
                      "author": {
                        "type": "string",
                        "description": "Author of the blog post",
                        "example": "John Doe"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date and time the blog post was created",
                        "example": "2023-01-01T12:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["blog"],
        "summary": "Create a new blog post",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "content"],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Title of the blog post",
                    "example": "My First Blog Post"
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of the blog post",
                    "example": "This is the content of my first blog post."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Blog post created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/blog/{id}": {
      "get": {
        "tags": ["blog"],
        "summary": "Get a single blog post by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the blog post to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Blog post retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Blog post ID",
                      "example": "123456"
                    },
                    "title": {
                      "type": "string",
                      "description": "Title of the blog post",
                      "example": "My First Blog Post"
                    },
                    "content": {
                      "type": "string",
                      "description": "Content of the blog post",
                      "example": "This is the content of my first blog post."
                    },
                    "author": {
                      "type": "string",
                      "description": "Author of the blog post",
                      "example": "John Doe"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Date and time the blog post was created",
                      "example": "2023-01-01T12:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Blog post not found"
          }
        }
      },
      "put": {
        "tags": ["blog"],
        "summary": "Edit a blog post by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the blog post to edit"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Title of the blog post",
                    "example": "Updated Blog Post Title"
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of the blog post",
                    "example": "This is the updated content of the blog post."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Blog post updated successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Blog post not found"
          }
        }
      },
      "delete": {
        "tags": ["blog"],
        "summary": "Delete a blog post by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the blog post to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Blog post deleted successfully"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Blog post not found"
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "AccessToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "abilities": {
            "type": "string"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "profile_id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "format": "uuid"
          },
          "phone": {
            "type": "string",
            "format": "phone"
          },
          "password": {
            "type": "string"
          },
          "login_status": {
            "type": "boolean",
            "description": "Track if a user is allowed to login or not"
          },
          "is_super_user": {
            "type": "boolean"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "Profile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "profile_id": {
            "type": "string",
            "format": "uuid"
          },
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "profile_picture": {
            "type": "string"
          },
          "tagline": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "Organisation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "picture": {
            "type": "string"
          },
          "tagline": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "PaymentRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount to be paid.",
            "example": 100.0
          },
          "currency": {
            "type": "string",
            "description": "The currency of the payment.",
            "example": "USD"
          },
          "description": {
            "type": "string",
            "description": "Description of the payment.",
            "example": "Payment for order #1234"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for the payment.",
            "example": {
              "orderId": "1234",
              "customerId": "5678"
            }
          }
        },
        "required": ["amount", "currency", "description"]
      },

      "PaymentResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The ID of the transaction.",
            "example": "txn_1AbCdEfGhIjKlMnOpQrStUvWxYz"
          },
          "status": {
            "type": "string",
            "description": "The status of the payment.",
            "example": "success"
          },
          "amount": {
            "type": "number",
            "description": "The amount paid.",
            "example": 100.0
          },
          "currency": {
            "type": "string",
            "description": "The currency of the payment.",
            "example": "USD"
          },
          "description": {
            "type": "string",
            "description": "Description of the payment.",
            "example": "Payment for order #1234"
          }
        }
      },

      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message",
            "example": "Invalid payment request"
          }
        }
      },

      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "organisation_id": {
            "type": "string",
            "format": "uuid"
          },
          "activity_id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "saved": {
            "type": "boolean"
          },
          "done": {
            "type": "boolean"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "Activity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "actor_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "entity_type": {
            "type": "string",
            "format": "uuid"
          },
          "action_type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "Entity": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "Action": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "Blog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "profile_id": {
            "type": "string",
            "format": "uuid"
          },
          "organisation_id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "hash_title": {
            "type": "string"
          },
          "hash_summary": {
            "type": "string"
          },
          "hash_content": {
            "type": "string"
          },
          "is_published": {
            "type": "boolean"
          },
          "published_by": {
            "type": "boolean"
          },
          "published_at": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_super_role": {
            "type": "boolean"
          },
          "is_published": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "Permission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "Language": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "iso": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "Country": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "capital": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "State": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "country_id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "capital": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "tag"
        }
      },

      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },

    "requestBodies": {
      "User": {
        "description": "Creating a new user",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },

    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": ""
      }
    }
  }
}
